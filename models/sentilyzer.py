# -*- coding: utf-8 -*-
"""sentilyzer.ipynb

Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1hEsVmA5l-i5dl5X3fc_4l8BSP8sWXJXz
"""

import sys
import joblib
from tensorflow.keras.datasets import imdb
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load the IMDb dataset
max_words = 10000
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_words)

# Convert integer sequences to text
word_index = imdb.get_word_index()
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])
x_train_text = [' '.join([reverse_word_index.get(i - 3, '?') for i in seq]) for seq in x_train]
x_test_text = [' '.join([reverse_word_index.get(i - 3, '?') for i in seq]) for seq in x_test]

# TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
x_train_tfidf = tfidf_vectorizer.fit_transform(x_train_text)
x_test_tfidf = tfidf_vectorizer.transform(x_test_text)

# Logistic Regression
classifier_lr = LogisticRegression()
classifier_lr.fit(x_train_tfidf, y_train)

# Save Logistic Regression model to disk
joblib.dump(classifier_lr, 'logistic_regression_model.joblib')

# SVM
classifier_svm = SVC()
classifier_svm.fit(x_train_tfidf, y_train)

# Save SVM model to disk
joblib.dump(classifier_svm, 'svm_model.joblib')

# Function to predict sentiment using Logistic Regression
def predict_sentiment_lr(text):
    text_tfidf = tfidf_vectorizer.transform([text])
    prediction = classifier_lr.predict(text_tfidf)
    return prediction[0]

# Function to predict sentiment using SVM
def predict_sentiment_svm(text):
    text_tfidf = tfidf_vectorizer.transform([text])
    prediction = classifier_svm.predict(text_tfidf)
    return prediction[0]